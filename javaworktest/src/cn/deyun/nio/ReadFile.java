package cn.deyun.nio;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/** * 使用FileChannel简单读取一个文件 * @author <a href="mailto:wangjian_me@126.com">王健</a> * @version 1.0 2011-10-28 */public class ReadFile {	public static void main(String[] args) throws Exception {				//read1();		//read2();		writeFile();	}	private static void read1() throws FileNotFoundException, IOException {		// 1:获取channel,FileChannel的实现类为FileChannelImpl,但API中没有公布此类		FileChannel channel = new FileInputStream("d:\\hello.txt").getChannel();		// 2:分配读取内存   Buffer的子类ByteBuffer用于声明字节内存块		ByteBuffer buffer = ByteBuffer.allocate(1024);// 每一次读取1024个字节		// 3:读取数据		int len = channel.read(buffer); // 注意，如果返回0或是-1则即读到了文件未尾		System.err.println("本将读取的字节长度：" + len);		buffer.flip(); // 将极限设为位置值，即15,再将位置设置为0,即开始。		while (buffer.hasRemaining()) { // 如果还有数据			System.err.print((char) buffer.get()); //一次获取一个字节		}		channel.close();	}		private static void read2() throws FileNotFoundException, IOException {		// 1：声明管道流		FileChannel fc = new FileInputStream("d:\\hello.txt").getChannel();		// 2:声明缓冲区		ByteBuffer bb = ByteBuffer.allocate(1024);		// 3：读取数据，注意使用>0判断，不能只判断-1		while (fc.read(bb) > 0) {			bb.flip(); // 将极限设置为位置值，再将位置设置为0			byte[] bt = bb.array(); // 读取里面的数据			System.err.print(new String(bt));// 输出数据		}	}	/**	 * 写入数据	 * @throws IOException	 */	private static void writeFile() throws IOException {		// 1:声明通道		FileChannel fc = new FileOutputStream("abc.txt").getChannel();		// 2:写入数据		fc.write(ByteBuffer.wrap("你好同学............".getBytes()));		fc.close();	}}